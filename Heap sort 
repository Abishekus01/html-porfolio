#include <iostream>
using namespace std;

// Function to heapify a subtree rooted at node i
void heapify(int a[], int n, int i, int &count) {
    int largest = i;       // Initialize largest as root
    int left = 2 * i + 1;  // Left child
    int right = 2 * i + 2; // Right child

    // Check if left child exists and is greater than root
    if (left < n && a[left] > a[largest]) {
        largest = left;
        count++;
    }

    // Check if right child exists and is greater than the largest so far
    if (right < n && a[right] > a[largest]) {
        largest = right;
        count++;
    }

    // If largest is not root, swap and continue heapifying
    if (largest != i) {
        swap(a[i], a[largest]);
        count++;
        heapify(a, n, largest, count); // Recursively heapify the affected subtree
    }
}

// Heap sort function
void heapSort(int a[], int n, int &count) {
    // Build max heap
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(a, n, i, count);
    }

    // Extract elements from the heap one by one
    for (int i = n - 1; i > 0; i--) {
        // Move current root to end
        swap(a[0], a[i]);
        count++;

        // Call heapify on the reduced heap
        heapify(a, i, 0, count);
    }
}

// Main function
int main() {
    int n, count = 0;

    // Input the size of the array
    cout << "Enter the number of elements: ";
    cin >> n;

    int a[n];
    cout << "Enter the elements of the array:\n";
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }

    // Perform heap sort
    heapSort(a, n, count);

    // Output the sorted array
    cout << "Sorted array:\n";
    for (int i = 0; i < n; i++) {
        cout << a[i] << " ";
    }
    cout << endl;

    // Output the number of iterations
    cout << "Number of iterations: " << count << endl;

    return 0;
}
